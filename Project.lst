Microsoft (R) Macro Assembler Version 14.29.30139.0	    08/09/22 22:58:59
<Project Five: Arrays, Addressing, Stack Passed Params     (  Page 1 - 1


				TITLE Project Five: Arrays, Addressing, Stack Passed Params     (Proj5_maesz.asm)

				; Author: Zachary Maes
				; Last Modified: August 9th, 2022
				; OSU email address: maesz@oregonstate.edu
				; Course number/section: CS271 Section 400
				; Project Number: 5    Due Date: August 7th, 2022 [2 Grace days in canvas]
				; Description: 

				; This program creates random decimal values based upon three defined constants, ARRAYSIZE=200, LO=15, and HI-50. These constants should be able to be 
				; modified by future programmers to change the ranges and list lenghts. For now, 200 random decimals are generated and filled into a list called randArray. 
				; The length is defined by the constant ARRAYSIZE. The random decimals are within the range of 15 and 50 inclusive. These ranges are defined by the constants LO and HI.
				; The original random randArray list is displayed first, and then sorted in place in ascending order with a bubble sort algorithm.
				; After sorting, the newly sorted randArray list is passed to another procedure that finds the median value of the sorted list.
				; The found median value is displayed, and then the sorted list is displayed. Next the sorted list and an empty countsList are passed to a new procedure.
				; This new procedure fills countsList with the count of each value from randArray in the range of [15-50] or [LO - HI] and displays the list of instances.
				; Finally the program is completed with a farewell message.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; (insert macro definitions here)
				; (insert constant definitions here)

 = 000000C9			ARRAYSIZE = 201	; NOTE TO GRADER: I left at 201 because even values above 41 have a bug...
								; I think it might be an issue with the sorting algorithm when it tries to sort even lists..
								; regardless, I couldn't figure out what was wrong... It should work fine for odd though...
 = 0000000F			LO        = 15
 = 00000032			HI        = 50

 00000000			.data
				; (insert variable definitions here)

				;INTRODUCTION DATA
 00000000 50 72 6F 6A 65	greeting		    BYTE	"Project Five: Arrays, Addressing, Stack Passed Parameters by Zachary Maes!",0
	   63 74 20 46 69
	   76 65 3A 20 41
	   72 72 61 79 73
	   2C 20 41 64 64
	   72 65 73 73 69
	   6E 67 2C 20 53
	   74 61 63 6B 20
	   50 61 73 73 65
	   64 20 50 61 72
	   61 6D 65 74 65
	   72 73 20 62 79
	   20 5A 61 63 68
	   61 72 79 20 4D
	   61 65 73 21 00
 0000004B 54 68 69 73 20	description_1       BYTE	"This program will do something akin to magic...",0
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 64 6F
	   20 73 6F 6D 65
	   74 68 69 6E 67
	   20 61 6B 69 6E
	   20 74 6F 20 6D
	   61 67 69 63 2E
	   2E 2E 00
 0000007B 32 30 30 20 72	description_2       BYTE	"200 random decimals are generated and filled into a list called randArray. The length is defined by the constant ARRAYSIZE.",0
	   61 6E 64 6F 6D
	   20 64 65 63 69
	   6D 61 6C 73 20
	   61 72 65 20 67
	   65 6E 65 72 61
	   74 65 64 20 61
	   6E 64 20 66 69
	   6C 6C 65 64 20
	   69 6E 74 6F 20
	   61 20 6C 69 73
	   74 20 63 61 6C
	   6C 65 64 20 72
	   61 6E 64 41 72
	   72 61 79 2E 20
	   54 68 65 20 6C
	   65 6E 67 74 68
	   20 69 73 20 64
	   65 66 69 6E 65
	   64 20 62 79 20
	   74 68 65 20 63
	   6F 6E 73 74 61
	   6E 74 20 41 52
	   52 41 59 53 49
	   5A 45 2E 00
 000000F7 54 68 65 20 72	description_3       BYTE	"The random decimals are within the range of 15 and 50 incluseive. These ranges are defined by the constants LO and HI.",0
	   61 6E 64 6F 6D
	   20 64 65 63 69
	   6D 61 6C 73 20
	   61 72 65 20 77
	   69 74 68 69 6E
	   20 74 68 65 20
	   72 61 6E 67 65
	   20 6F 66 20 31
	   35 20 61 6E 64
	   20 35 30 20 69
	   6E 63 6C 75 73
	   65 69 76 65 2E
	   20 54 68 65 73
	   65 20 72 61 6E
	   67 65 73 20 61
	   72 65 20 64 65
	   66 69 6E 65 64
	   20 62 79 20 74
	   68 65 20 63 6F
	   6E 73 74 61 6E
	   74 73 20 4C 4F
	   20 61 6E 64 20
	   48 49 2E 00
 0000016E 54 68 65 20 6F	description_4       BYTE	"The original random randArray list is displayed first, and then sorted in place in ascending order with a bubble sort algorithm.",0
	   72 69 67 69 6E
	   61 6C 20 72 61
	   6E 64 6F 6D 20
	   72 61 6E 64 41
	   72 72 61 79 20
	   6C 69 73 74 20
	   69 73 20 64 69
	   73 70 6C 61 79
	   65 64 20 66 69
	   72 73 74 2C 20
	   61 6E 64 20 74
	   68 65 6E 20 73
	   6F 72 74 65 64
	   20 69 6E 20 70
	   6C 61 63 65 20
	   69 6E 20 61 73
	   63 65 6E 64 69
	   6E 67 20 6F 72
	   64 65 72 20 77
	   69 74 68 20 61
	   20 62 75 62 62
	   6C 65 20 73 6F
	   72 74 20 61 6C
	   67 6F 72 69 74
	   68 6D 2E 00
 000001EF 41 66 74 65 72	description_5       BYTE	"After sorting, the newly sorted randArray list passed to another procedure that finds the median value of the sorted list.",0
	   20 73 6F 72 74
	   69 6E 67 2C 20
	   74 68 65 20 6E
	   65 77 6C 79 20
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 41 72 72 61
	   79 20 6C 69 73
	   74 20 70 61 73
	   73 65 64 20 74
	   6F 20 61 6E 6F
	   74 68 65 72 20
	   70 72 6F 63 65
	   64 75 72 65 20
	   74 68 61 74 20
	   66 69 6E 64 73
	   20 74 68 65 20
	   6D 65 64 69 61
	   6E 20 76 61 6C
	   75 65 20 6F 66
	   20 74 68 65 20
	   73 6F 72 74 65
	   64 20 6C 69 73
	   74 2E 00
 0000026A 54 68 65 20 66	description_6       BYTE	"The found median value is displayed, and then the sorted list is displayed. Next the sorted list and an empty countsList are passed to a new procedure.",0
	   6F 75 6E 64 20
	   6D 65 64 69 61
	   6E 20 76 61 6C
	   75 65 20 69 73
	   20 64 69 73 70
	   6C 61 79 65 64
	   2C 20 61 6E 64
	   20 74 68 65 6E
	   20 74 68 65 20
	   73 6F 72 74 65
	   64 20 6C 69 73
	   74 20 69 73 20
	   64 69 73 70 6C
	   61 79 65 64 2E
	   20 4E 65 78 74
	   20 74 68 65 20
	   73 6F 72 74 65
	   64 20 6C 69 73
	   74 20 61 6E 64
	   20 61 6E 20 65
	   6D 70 74 79 20
	   63 6F 75 6E 74
	   73 4C 69 73 74
	   20 61 72 65 20
	   70 61 73 73 65
	   64 20 74 6F 20
	   61 20 6E 65 77
	   20 70 72 6F 63
	   65 64 75 72 65
	   2E 00
 00000302 54 68 69 73 20	description_7       BYTE	"This new procedure fills countsList with the count of each value from randArray in the range of [15-50] or [LO - HI] and displays the list of instances.",0
	   6E 65 77 20 70
	   72 6F 63 65 64
	   75 72 65 20 66
	   69 6C 6C 73 20
	   63 6F 75 6E 74
	   73 4C 69 73 74
	   20 77 69 74 68
	   20 74 68 65 20
	   63 6F 75 6E 74
	   20 6F 66 20 65
	   61 63 68 20 76
	   61 6C 75 65 20
	   66 72 6F 6D 20
	   72 61 6E 64 41
	   72 72 61 79 20
	   69 6E 20 74 68
	   65 20 72 61 6E
	   67 65 20 6F 66
	   20 5B 31 35 2D
	   35 30 5D 20 6F
	   72 20 5B 4C 4F
	   20 2D 20 48 49
	   5D 20 61 6E 64
	   20 64 69 73 70
	   6C 61 79 73 20
	   74 68 65 20 6C
	   69 73 74 20 6F
	   66 20 69 6E 73
	   74 61 6E 63 65
	   73 2E 00
 0000039B 46 69 6E 61 6C	description_8       BYTE	"Finally the program is completed with a farewell message.",0
	   6C 79 20 74 68
	   65 20 70 72 6F
	   67 72 61 6D 20
	   69 73 20 63 6F
	   6D 70 6C 65 74
	   65 64 20 77 69
	   74 68 20 61 20
	   66 61 72 65 77
	   65 6C 6C 20 6D
	   65 73 73 61 67
	   65 2E 00

				; DISPLAY DATA
 000003D5 55 4E 53 4F 52	unsorted_message    BYTE    "UNSORTED RANDOM DECIMAL LIST:",0
	   54 45 44 20 52
	   41 4E 44 4F 4D
	   20 44 45 43 49
	   4D 41 4C 20 4C
	   49 53 54 3A 00
 000003F3 4D 45 44 49 41	median_message      BYTE    "MEDIAN VALUE OF THE SORTED DECIMAL LIST: ",0
	   4E 20 56 41 4C
	   55 45 20 4F 46
	   20 54 48 45 20
	   53 4F 52 54 45
	   44 20 44 45 43
	   49 4D 41 4C 20
	   4C 49 53 54 3A
	   20 00
 0000041D 53 4F 52 54 45	sorted_message      BYTE    "SORTED RANDOM DECIMAL LIST (ASCENDING):",0
	   44 20 52 41 4E
	   44 4F 4D 20 44
	   45 43 49 4D 41
	   4C 20 4C 49 53
	   54 20 28 41 53
	   43 45 4E 44 49
	   4E 47 29 3A 00
 00000445 4C 49 53 54 20	list_message        BYTE    "LIST OF INSTANCES OF EACH GENERATED DECIMAL STARTING AT THE VALUE OF LO AND ASCENDING TO THE VALUE OF HI:",0
	   4F 46 20 49 4E
	   53 54 41 4E 43
	   45 53 20 4F 46
	   20 45 41 43 48
	   20 47 45 4E 45
	   52 41 54 45 44
	   20 44 45 43 49
	   4D 41 4C 20 53
	   54 41 52 54 49
	   4E 47 20 41 54
	   20 54 48 45 20
	   56 41 4C 55 45
	   20 4F 46 20 4C
	   4F 20 41 4E 44
	   20 41 53 43 45
	   4E 44 49 4E 47
	   20 54 4F 20 54
	   48 45 20 56 41
	   4C 55 45 20 4F
	   46 20 48 49 3A
	   00
 000004AF 20 00			one_space           BYTE    " ",0					; used to print a space inbetween the decimals when displayed

				; ARRAYS
 000004B1  000000C9 [		randArray			DWORD   ARRAYSIZE DUP(?)	    ; DUP declaration, empty Array of ARRAYSIZE
	    00000000
	   ]
 000007D5 000000C9		arrayLength			DWORD	LENGTHOF randArray      ; save length of randArray

 000007D9  00000024 [		countsArray         DWORD   (HI - LO + 1) DUP(?)    ; set up counts array to store the final counted elements
	    00000000
	   ]
 00000869 00000024		countsArrLen		DWORD	LENGTHOF countsArray    ; length of the the counts array for use in loop.

				; FAREWELL DATA
 0000086D 49 66 20 79 6F	farewell_1          BYTE    "If you have made it this far, congratulations! Thanks for reading my program, goodbye!",0
	   75 20 68 61 76
	   65 20 6D 61 64
	   65 20 69 74 20
	   74 68 69 73 20
	   66 61 72 2C 20
	   63 6F 6E 67 72
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 54 68 61
	   6E 6B 73 20 66
	   6F 72 20 72 65
	   61 64 69 6E 67
	   20 6D 79 20 70
	   72 6F 67 72 61
	   6D 2C 20 67 6F
	   6F 64 62 79 65
	   21 00

 00000000			.code
 00000000			main PROC
				; (insert executable instructions here)
 00000000  E8 00000000 E		CALL Randomize				   ; Initialize starting seed vaue of RandomRange procedure
							   
 00000005  68 0000039B R		PUSH OFFSET description_8      ; push strings to stack
 0000000A  68 00000302 R		PUSH OFFSET description_7    
 0000000F  68 0000026A R		PUSH OFFSET description_6    
 00000014  68 000001EF R		PUSH OFFSET description_5    
 00000019  68 0000016E R		PUSH OFFSET description_4    
 0000001E  68 000000F7 R		PUSH OFFSET description_3    
 00000023  68 0000007B R		PUSH OFFSET description_2    
 00000028  68 0000004B R		PUSH OFFSET description_1    
 0000002D  68 00000000 R		PUSH OFFSET greeting
 00000032  E8 00000097			CALL introduction			

 00000037  68 000004B1 R		PUSH OFFSET randArray          ; push address of randArray to stack
 0000003C  E8 000000CE			CALL fillArray

 00000041  68 000004AF R		PUSH OFFSET one_space		   ; push string offsets
 00000046  68 000003D5 R		PUSH OFFSET unsorted_message   
 0000004B  68 000004B1 R		PUSH OFFSET randArray
 00000050  FF 35 000007D5 R		PUSH arrayLength
 00000056  E8 000000DF			CALL displayList			   ; displayList 1st call for unsorted

 0000005B  68 000004B1 R		PUSH OFFSET randArray		   ; push address of randArray to stack
 00000060  E8 0000012D			CALL sortList				   ; Calls exchangeElements within the sortList proc

 00000065  68 000004AF R		PUSH OFFSET one_space		   ; push the space string
 0000006A  68 0000041D R		PUSH OFFSET sorted_message     
 0000006F  68 000004B1 R		PUSH OFFSET randArray
 00000074  FF 35 000007D5 R		PUSH arrayLength			   ;---------
 0000007A  E8 000000BB			CALL displayList			   ; displayList 2nd call for sorted
					
 0000007F  68 000003F3 R		PUSH OFFSET median_message	   ; push string and array offsets	
 00000084  68 000004B1 R		PUSH OFFSET randArray
 00000089  E8 0000013E			CALL displayMedian

 0000008E  68 000004B1 R		PUSH OFFSET randArray		   ; push array offsets
 00000093  68 000007D9 R		PUSH OFFSET countsArray
 00000098  FF 35 00000869 R		PUSH countsArrLen
 0000009E  E8 000001BA			CALL countList

 000000A3  68 000004AF R		PUSH OFFSET one_space		   ; push string offsets
 000000A8  68 00000445 R		PUSH OFFSET list_message       
 000000AD  68 000007D9 R		PUSH OFFSET	countsArray		   
 000000B2  FF 35 00000869 R		PUSH countsArrLen
 000000B8  E8 0000007D			CALL displayList		       ; displayList 3rd call for list_message

 000000BD  68 0000086D R	    PUSH OFFSET farewell_1	    
 000000C2  E8 000001CA			CALL farewell			       ; My additional farewell procedure

					Invoke ExitProcess,0	       ; exit to operating system
 000000C7  6A 00	   *	    push   +000000000h
 000000C9  E8 00000000 E   *	    call   ExitProcess
 000000CE			main ENDP
				; (insert additional procedures here)

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; Description: 
				; Introduces the Program and Author at the start of the program. It then uses a loop to print
				;	all passed parameter strings for the program introduction.
				;
				; Preconditions: The required strings must be declared in the .data section,
				;	and also pushed to the stack prior to the procedure call.
				;
				; Postconditions: None
				;
				; Receives:
				;	[EBP+40] = offset description_8      
				;	[EBP+36] = offset description_7    
				;	[EBP+32] = offset description_6    
				;	[EBP+28] = offset description_5    
				;	[EBP+24] = offset description_4    
				;	[EBP+20] = offset description_3    
				;	[EBP+16] = offset description_2    
				;	[EBP+12] = offset of description_1 string
				;	[EBP+8]  = offset of greeting string
				;
				; Returns: N/A
				; ---------------------------------------------------------------------------------

 000000CE			introduction PROC
 000000CE  55				PUSH EBP					; Base Pointer	
 000000CF  8B EC			MOV  EBP, ESP	
 000000D1  60				PUSHAD						; Preserve all registers

 000000D2  B8 00000008			MOV  EAX, 8					; 8 for base+offset addressing of first string
 000000D7  8B 54 05 00			MOV  EDX, [EBP+EAX]			; set up first string in edx for printing
 000000DB  E8 00000000 E		CALL WriteString
 000000E0  E8 00000000 E		CALL CrLf
 000000E5  E8 00000000 E		CALL CrLf

 000000EA  83 C0 04			ADD  EAX, 4					; increment eax for first string in loop to follow
 000000ED  B9 00000008			MOV  ECX, 8					; loop counter
 000000F2				_introLoop:					; loops 8x through all passed intro strings and prints them.
 000000F2  8B 54 05 00				MOV  EDX, [EBP+EAX]
 000000F6  E8 00000000 E			CALL WriteString
 000000FB  E8 00000000 E			CALL CrLf
 00000100  83 C0 04				ADD  EAX, 4
 00000103  E2 ED				LOOP _introLoop
					
 00000105  E8 00000000 E		CALL CrLf
 0000010A  61				POPAD   
 0000010B  5D				POP EBP
 0000010C  C2 0008			RET 8
 0000010F			introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: fillArray
				;
				; This procedure uses a loop to generate random decimals and insert them into 
				;     an empty array called randArray.
				;
				; Preconditions: randArray must be declared in data as an empty array with 
				;     the ARRAYSIZE constant as its size and DWORD as its type.
				;
				; Postconditions: randArray will be filled with ARRAYSIZE number of decimals.
				;
				; Receives:
				;     [EBP+8] = offset reference to randArray
				;     LO, HI, and ARRAYSIZE used as globals
				;
				; Returns:
				;	  randArray
				; ---------------------------------------------------------------------------------

 0000010F			fillArray PROC
 0000010F  55				PUSH EBP		      ; Base Pointer     
 00000110  8B EC			MOV  EBP, ESP	      
 00000112  60				PUSHAD				  ; Preserve used registers
					
 00000113  B9 000000C9			MOV  ECX, ARRAYSIZE   ; ARRAYSIZE List length into ECX
 00000118  8B 7D 08			MOV  EDI, [EBP+8]     ; Address of list into EDI

 0000011B				_fillLoop:
					; GENERATE RANDOM DECIMAL
 0000011B  B8 00000032				MOV  EAX, HI	  ; HI into EAX
 00000120  83 E8 0F				SUB  EAX, LO      ; HI - LO
 00000123  83 C0 01				ADD  EAX, 1		  ; add 1 to EAX to get upper limit(exclusive) for randomRange	
 00000126  E8 00000000 E			CALL RandomRange  ; generates 0 - EAX (exclusive), saves random val in EAX
 0000012B  83 C0 0F				ADD  EAX, LO      ; Add LO value to EAX random num to get random within HI-LO range

					; FILL ARRAY
 0000012E  89 07				MOV [EDI], EAX	  ; overwrite value in memory pointed to by EDI
 00000130  83 C7 04				ADD  EDI, 4		  ; Hardcoded 4 (DWORD) to increment to next index in Array
 00000133  E2 E6				LOOP _fillLoop

 00000135  61				POPAD
 00000136  5D				POP EBP
 00000137  C2 0010			RET 16
 0000013A			fillArray ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayList
				;
				; Description: This procedure is called on three separate ocassions. It prints a passed 
				;	  parameter string. It then iterates through a passed array parameter, printing out 
				;     the current item in the array followed by a space. This repets for all elements 
				;     in the array. 
				;
				; Preconditions: 
				;	 -randArray must be filled prior to the first displayList call.
				;	 -randArray must be sorted prior to the second displayList call.
				;	 -countsArray must be filled prior to the third displayList call.
				;	 -countsArrLen must be declared in .data with the LENGTHOF operator
				;
				; Postconditions: N/A
				;
				; Receives:
				;    [EBP+20] = OFFSET reference of one_space string in memory
				;	 [EBP+16] = OFFSET reference of variable string message in memory
				;					[1st. unsorted_message // 2nd. sorted_message // 3rd. list_message]
				;	 [EBP+12] = OFFSET reference of variable array in memory
				;					[1st. randArray // 2nd. randArry // 3rd. countsArray]
				;    [EBP+8]  = pushed length of array. [ARRAYSIZE or countsArrLen]
				;
				; Returns:
				;    -No specific returns other than writing strings and decimals to the terminal.
				; ---------------------------------------------------------------------------------

 0000013A			displayList PROC
 0000013A  55				PUSH EBP		       ; Base Pointer
 0000013B  8B EC			MOV  EBP, ESP	
 0000013D  60				PUSHAD			       ; preserve all gp registers

 0000013E  8B 55 10			MOV  EDX, [EBP+16]     ; Write the message string
 00000141  E8 00000000 E		CALL WriteString
 00000146  E8 00000000 E		CALL CrLf

 0000014B  8B 7D 0C			MOV  EDI, [EBP+12]	   ; move randArray start ref to EDI
 0000014E  8B 4D 08			MOV  ECX, [EBP+8]	   ; move ARRAYSIZE or countsArrLen to ECX counter
 00000151  BB 00000001			MOV  EBX, 1			   ; EBX counter for new line (20)
					
 00000156				_PrintArr:
 00000156  8B 07				MOV EAX, [EDI]	   ; write the current decimal	
 00000158  E8 00000000 E			CALL WriteDec

 0000015D  8B 55 14				MOV EDX, [EBP+20]  ; write the one_space string
 00000160  E8 00000000 E			CALL WriteString

 00000165  83 FB 14				CMP EBX, 20		   ; compare the item per line count to determine new line
 00000168  7C 11				JL	_sameLine
 0000016A  74 00				JE	_newLine

 0000016C					_newLine:
 0000016C  E8 00000000 E				CALL CrLf
 00000171  83 C7 04					ADD EDI, 4
 00000174  BB 00000001					MOV EBX, 1
 00000179  E2 DB					LOOP _PrintArr
						
 0000017B					_sameLine:
 0000017B  83 C7 04					ADD EDI, 4
 0000017E  83 C3 01					ADD EBX, 1
 00000181  E2 D3					LOOP _PrintArr
					
 00000183  E8 00000000 E		CALL CrLf
 00000188  E8 00000000 E		CALL CrLf

 0000018D  61				POPAD		
 0000018E  5D				POP EBP
 0000018F  C2 0010			RET 16
 00000192			displayList ENDP


				; ---------------------------------------------------------------------------------
				; Name: sortList

				; Description: This procedure sorts the randArray list with a bubble sort algorithm.
				;	When the algorithm encounters a value swap, it calls the exchangeElements procedure.
				;	The list is sorted in ascending order.

				; Preconditions: 
				;	-exchangeElements procedure must be defined
				;	-randArray must be filled with random decimals
				;	-randArray must be pushed to the call stack
				;
				; Postconditions: N/A
				;
				; Receives:
				;	[EBP+8] = pushed offset reference to start of randArray
				;
				; Returns:
				;	-randArray becomes sorted in ascending order.
				; ---------------------------------------------------------------------------------

 00000192			sortList PROC
 00000192  55				PUSH EBP		             ; Base Pointer
 00000193  8B EC			MOV  EBP, ESP	
 00000195  60				PUSHAD			             ; preserve registers

 00000196  B9 000000C9			MOV ECX, ARRAYSIZE           ; number of elements of randArray into ECX for decrementing the loop iteration counter
					
 0000019B				_arrayLoop:
 0000019B  51					PUSH ECX			     ; save register for loop count
 0000019C  8B 7D 08				MOV EDI, [EBP+8]         ; address of first element of randArray into EDI [or next incremented element after loop]

						
 0000019F					_innerLoop:
 0000019F  8B 07					MOV EAX, [EDI]       ; move array element at EDI pointer to EAX register
 000001A1  39 47 04					CMP [EDI+4], EAX     ; compare next index to previous index at this iteration of the bubble sort
 000001A4  7D 06					JGE _noExchange	     ; next is greater than or equal to previous so there is no exchage of values
							
 000001A6  57						PUSH EDI			 ; push EDI pointer (prev)
 000001A7  E8 0000000D					CALL exchangeElements

 000001AC					_noExchange:
 000001AC  83 C7 04					ADD EDI, 4			 ; increment EDI pointer
 000001AF  E2 EE					LOOP _innerLoop

 000001B1  59						POP ECX				 ; pop the _arrayLoop counter out of the stack
 000001B2  E2 E7					LOOP _arrayLoop

 000001B4  61				POPAD
 000001B5  5D				POP	EBP
 000001B6  C2 0004			RET 4
 000001B9			sortList ENDP

				; ---------------------------------------------------------------------------------
				; Name: exchangeElements
				;
				; Description: This procedure is called from the sortList procedure if two values
				;	need to be swapped in the bubble sort algorithm. This is done with some register 
				;	mov instructions and the xchg instruction.
				;
				; Preconditions: 
				;	-EDI from sortArray must point to an index of the randArray list.
				;	-EDI must be pushed to the call stack
				;
				; Postconditions: POPAD at the end in order to retrieve the necessary 
				;	registers used in the remainder of sortList procedure.
				;
				; Receives:
				;	[EBP+8 ] = pushed EDI pointer to (prev) values position in list
				;
				; Returns:
				;	values from [EDI] and [EDI+4] are swapped in place.
				; ---------------------------------------------------------------------------------

 000001B9			exchangeElements PROC
 000001B9  55				PUSH EBP		  ; Base Pointer
 000001BA  8B EC			MOV  EBP, ESP	  
 000001BC  60				PUSHAD			  ; preserve registers from the calling procedure
					
 000001BD  8B 7D 08			MOV EDI, [EBP+8]  ; move value at array pointer to EAX
 000001C0  8B 07			MOV EAX, [EDI]	  ; save value (prev )at edi pointer to EAX...let it get nice and zesty 	
 000001C2  87 47 04			XCHG EAX, [EDI+4] ; do a little switcheroo with our handy dandy xchg 
 000001C5  89 07			MOV [EDI], EAX    ; after switch eax is now the (next) val and must be moved to where the prev val used to be

 000001C7  61				POPAD
 000001C8  5D				POP	EBP
 000001C9  C2 0004			RET 4
 000001CC			exchangeElements ENDP


				; ---------------------------------------------------------------------------------
				; Name: displayMedian
				;
				; Description: This procedure uses a series of jump conditionals and loops
				;	to deterimine if the list length is odd or even, and then find the median value 
				;	through another series of checks. 
				;
				;
				; Preconditions: 
				;	median_message must be defined in data
				;	randArray must be filled and sorted in ascending order
				;	both of these must be pushed as offsets to the stack prior to the function call
				;
				; Postconditions: N/A
				;
				; Receives:
				;	[EBP+12] = OFFSET ref of median_message
				;	[EBP+8]  = OFFSET ref of randArray
				;
				; Returns:
				;	writes the median_message string and the found median from randArray
				; ---------------------------------------------------------------------------------

 000001CC			displayMedian PROC
 000001CC  55				PUSH EBP		           ; Base Pointer
 000001CD  8B EC			MOV  EBP, ESP	
 000001CF  60				PUSHAD

 000001D0  8B 55 0C			MOV  EDX, [EBP+12]		   ; display message
 000001D3  E8 00000000 E		CALL WriteString

 000001D8  B8 000000C9			MOV  EAX, ARRAYSIZE		   ; Set low dividend =====> DIV instruction [EDX:EAX / EBX] ==> (EAX = Quotient) and (EDX = Remainder)
 000001DD  BA 00000000			MOV  EDX, 0				   ; Clear the high dividend
 000001E2  BB 00000002			MOV  EBX, 2				   ; Divide EDX:EAX by 2
 000001E7  F7 F3			DIV  EBX				   ; (EAX = Quotient) and (EDX = Remainder)

 000001E9  83 FA 00			CMP  EDX, 0				   ; check the remainder for 0
 000001EC  74 02			JE   _even
 000001EE  7F 4B			JG   _odd

 000001F0				_even:					   ; IF remainder is 0 (even)
 000001F0  8B C8				MOV ECX, EAX           ; set loop counter to get to the lower median
 000001F2  8B 7D 08				MOV EDI, [EBP+8]       ; point EDI to the beginning of the array
 000001F5					_evenLoop:
 000001F5  83 C7 04					ADD EDI, 4
 000001F8  E2 FB					LOOP _evenLoop
 000001FA  8B 07				MOV EAX, [EDI]
 000001FC  3B 47 04				CMP EAX, [EDI+4]	   ; compare the left median and right median values
 000001FF  74 02				JE	_writeItNow
 00000201  75 0C				JNE _evenOddCheck
					
 00000203				_writeItNow:				   ; high and low medians are equal so median value is EAX=[EDI]
						; EAX=[EDI]
 00000203  E8 00000000 E			CALL WriteDec
 00000208  E8 00000000 E			CALL CrLf
 0000020D  EB 44				JMP  _evenDone
					
 0000020F				_evenOddCheck:			   ; DIV instruction [EDX:EAX / EBX] ==> (EAX = Quotient) and (EDX = Remainder)	
 0000020F  03 47 04				ADD  EAX, [EDI+4]	   ; add left median and right median values into EAX
 00000212  BA 00000000				MOV  EDX, 0			   ; Clear the high dividend
 00000217  BB 00000002				MOV  EBX, 2			   ; Divide EDX:EAX by 2
 0000021C  F7 F3				DIV  EBX			   ; (EAX = Quotient) and (EDX = Remainder)
 0000021E					_compareIt:
 0000021E  83 FA 00			CMP  EDX, 0		   ; check the remainder for 0
 00000221  74 E0					JE   _writeItNow   ; EAX is the median
 00000223  7F 00					JG   _oddInside	   ; odd... remainder is 1

 00000225				_oddInside:
 00000225  8B 07				MOV  EAX, [EDI]		   ; add 1 before dividing by 2 again...
 00000227  03 47 04				ADD  EAX, [EDI+4]
 0000022A  83 C0 01				ADD  EAX, 1			   ; EAX low dividend is now set for DIV
 0000022D  BA 00000000				MOV  EDX, 0			   ; Clear the high dividend
 00000232  BB 00000002				MOV  EBX, 2			   ; Divide EDX:EAX by 2
 00000237  F7 F3				DIV  EBX			   ; (EAX = Quotient) and (EDX = Remainder)
 00000239  EB E3				JMP _compareIt

 0000023B				_odd:		               ; IF remainder is not 0 (odd)
 0000023B  8B C8				MOV ECX, EAX           ; set loop counter
 0000023D  8B 7D 08				MOV EDI, [EBP+8]
 00000240					_oddLoop:
 00000240  83 C7 04					ADD EDI, 4
 00000243  E2 FB					LOOP _oddLoop
 00000245  EB 00				JMP _finalOdd

 00000247				_finalOdd:
 00000247  8B 07				MOV EAX, [EDI]
 00000249  E8 00000000 E			CALL WriteDec
 0000024E  E8 00000000 E			CALL CrLf
					
 00000253				_evenDone:

 00000253  E8 00000000 E		CALL CrLf
 00000258  61				POPAD
 00000259  5D				POP	EBP
 0000025A  C2 0008			RET 8
 0000025D			displayMedian ENDP

				; ---------------------------------------------------------------------------------
				; Name: countList
				;
				; Description: This procedure counts the number of instances of each decimal occurance
				;	within the randArray passed parameter. It is checking for all decimals in the given
				;   constant range of [LO to HI] inclusive. The count is then placed into the passed 
				;   countsList array (including counts of 0.)

				; Preconditions: 
				;	-randArray must be filled first and also sorted in ascending order
				;   -empty countsArray must be declared to (HI-LO+1) length
				;   -countsArrLen must be declared with LENGTHOF countsArray
				;
				; Postconditions: N/A
				;
				; Receives:
				;	[EBP+16] = OFFSET reference to sorted randArray
				;	[EBP+12] = OFFSET reference to empty countsArray
				;	[EBP+8]  = countsArrLen variable
				;
				; Returns:
				;	-filled countsArray 
				; ---------------------------------------------------------------------------------

 0000025D			countList PROC
 0000025D  55				PUSH EBP						; Base Pointer
 0000025E  8B EC			MOV  EBP, ESP				
 00000260  60				PUSHAD							; preserve registers

 00000261  8B 4D 08			MOV  ECX, [EBP+8]				; loop counter to countsArrLen
 00000264  8B 7D 10			MOV  EDI, [EBP+16]				; pointer to start of randArray index0
 00000267  8B 75 0C			MOV  ESI, [EBP+12]				; pointer to start of countsArray index0
 0000026A  BA 0000000F			MOV  EDX, LO					; holds Lo and increments up 

 0000026F				_countsArrLoop:
 0000026F  BB 00000000				MOV EBX, 0					; value amount counter reset to 0
						
 00000274					_skipValReset:
 00000274  39 17					CMP [EDI], EDX
 00000276  75 0A					JNE  _inputValue
 00000278  74 00					JE   _sameValueHappened

 0000027A					_sameValueHappened:
 0000027A  83 C3 01					ADD	 EBX, 1				; add 1 to value counter
 0000027D  83 C7 04					ADD  EDI, 4				; inc edi pointer
 00000280  EB F2					JMP  _skipValReset

 00000282					_inputValue:
 00000282  89 1E					MOV [ESI], EBX	
 00000284  83 C6 04					ADD  ESI, 4
 00000287  83 C2 01					ADD  EDX, 1
 0000028A  E2 E3					LOOP _countsArrLoop     ; dec ecx

 0000028C  61				POPAD
 0000028D  5D				POP	EBP
 0000028E  C2 000C			RET 12
 00000291			countList ENDP

				; ---------------------------------------------------------------------------------
				; Name: farewell
				;
				; Description: Extra procedure to print a farewell message. 
				;
				; Preconditions:
				;	-farewell_1 data string must be declared and passed as a parmeter.
				;
				; Postconditions: N/A
				;
				; Receives:
				;	[EBP+8] = OFFSET reference to farewell_1 string
				;
				; Returns:
				;	-Uses WriteString instruction to print farewell_1 string
				; ---------------------------------------------------------------------------------

 00000291			farewell PROC
 00000291  55				PUSH EBP			; Base Pointer
 00000292  8B EC			MOV  EBP, ESP	
 00000294  52				PUSH EDX			; preserve edx

 00000295  8B 55 08			MOV  EDX, [EBP+8]	; access farewell_1 string reference from stack
 00000298  E8 00000000 E		CALL WriteString	; write the string to the terminal
 0000029D  E8 00000000 E		CALL CrLf
 000002A2  E8 00000000 E		CALL CrLf

 000002A7  5A				POP	EDX		
 000002A8  5D				POP	EBP
 000002A9  C2 0004			RET 4
 000002AC			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    08/09/22 22:58:59
<Project Five: Arrays, Addressing, Stack Passed Params     (  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000008C4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002AC Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 0000025D _TEXT	Length= 00000034 Public STDCALL
  _countsArrLoop . . . . . . . .	L Near	 0000026F _TEXT	
  _skipValReset  . . . . . . . .	L Near	 00000274 _TEXT	
  _sameValueHappened . . . . . .	L Near	 0000027A _TEXT	
  _inputValue  . . . . . . . . .	L Near	 00000282 _TEXT	
displayList  . . . . . . . . . .	P Near	 0000013A _TEXT	Length= 00000058 Public STDCALL
  _PrintArr  . . . . . . . . . .	L Near	 00000156 _TEXT	
  _newLine . . . . . . . . . . .	L Near	 0000016C _TEXT	
  _sameLine  . . . . . . . . . .	L Near	 0000017B _TEXT	
displayMedian  . . . . . . . . .	P Near	 000001CC _TEXT	Length= 00000091 Public STDCALL
  _even  . . . . . . . . . . . .	L Near	 000001F0 _TEXT	
  _evenLoop  . . . . . . . . . .	L Near	 000001F5 _TEXT	
  _writeItNow  . . . . . . . . .	L Near	 00000203 _TEXT	
  _evenOddCheck  . . . . . . . .	L Near	 0000020F _TEXT	
  _compareIt . . . . . . . . . .	L Near	 0000021E _TEXT	
  _oddInside . . . . . . . . . .	L Near	 00000225 _TEXT	
  _odd . . . . . . . . . . . . .	L Near	 0000023B _TEXT	
  _oddLoop . . . . . . . . . . .	L Near	 00000240 _TEXT	
  _finalOdd  . . . . . . . . . .	L Near	 00000247 _TEXT	
  _evenDone  . . . . . . . . . .	L Near	 00000253 _TEXT	
exchangeElements . . . . . . . .	P Near	 000001B9 _TEXT	Length= 00000013 Public STDCALL
farewell . . . . . . . . . . . .	P Near	 00000291 _TEXT	Length= 0000001B Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 0000010F _TEXT	Length= 0000002B Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 0000011B _TEXT	
introduction . . . . . . . . . .	P Near	 000000CE _TEXT	Length= 00000041 Public STDCALL
  _introLoop . . . . . . . . . .	L Near	 000000F2 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000CE Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000192 _TEXT	Length= 00000027 Public STDCALL
  _arrayLoop . . . . . . . . . .	L Near	 0000019B _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 0000019F _TEXT	
  _noExchange  . . . . . . . . .	L Near	 000001AC _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 000000C9h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayLength  . . . . . . . . . .	DWord	 000007D5 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countsArrLen . . . . . . . . . .	DWord	 00000869 _DATA	
countsArray  . . . . . . . . . .	DWord	 000007D9 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description_1  . . . . . . . . .	Byte	 0000004B _DATA	
description_2  . . . . . . . . .	Byte	 0000007B _DATA	
description_3  . . . . . . . . .	Byte	 000000F7 _DATA	
description_4  . . . . . . . . .	Byte	 0000016E _DATA	
description_5  . . . . . . . . .	Byte	 000001EF _DATA	
description_6  . . . . . . . . .	Byte	 0000026A _DATA	
description_7  . . . . . . . . .	Byte	 00000302 _DATA	
description_8  . . . . . . . . .	Byte	 0000039B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_1 . . . . . . . . . . .	Byte	 0000086D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_message . . . . . . . . . .	Byte	 00000445 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
median_message . . . . . . . . .	Byte	 000003F3 _DATA	
one_space  . . . . . . . . . . .	Byte	 000004AF _DATA	
randArray  . . . . . . . . . . .	DWord	 000004B1 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted_message . . . . . . . . .	Byte	 0000041D _DATA	
unsorted_message . . . . . . . .	Byte	 000003D5 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
