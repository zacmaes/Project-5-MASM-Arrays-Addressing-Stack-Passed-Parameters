Microsoft (R) Macro Assembler Version 14.29.30139.0	    08/09/22 01:36:46
<Project Five: Arrays, Addressing, Stack Passed Params     (  Page 1 - 1


				TITLE Project Five: Arrays, Addressing, Stack Passed Params     (Proj5_maesz.asm)

				; Author: Zachary Maes
				; Last Modified: August 4th, 2022
				; OSU email address: maesz@oregonstate.edu
				; Course number/section: CS271 Section 400
				; Project Number: 5               Due Date: August 7th, 2022
				; Description: 



				; DELETE THIS!!!
				; EXAMPLE PYTHON BUBBLE SORT
				;def bubble_sort(a_list):
				    ;"""
				    ;Bubble sort algorithm that sorts a_list in ascending order.
				    ;"""
				    ;for pass_num in range(len(a_list) - 1):
				    ;    for index in range(len(a_list) - 1 - pass_num):
				       ;     if a_list[index] > a_list[index + 1]:
				     ;           temp = a_list[index]
				     ;           a_list[index] = a_list[index + 1]
				     ;           a_list[index + 1] = temp


				; PROGRAM DESCRIPTION FROM CANVAS

				; 1. Introduce the program

				; 2. Declare global constants with initial sizes ( ARRAYSIZE=200, LO=15, and HI=50.)
				;		-Generate ARRAYSIZE random integers in the range from LO to HI (Inclusive)
				;		-Store these random integers in consecutive elements of array randArray.
				;		-Hint: Call Randomize once in main to generate a random seed. Later, use RandomRange to generate each random number.
				;					HI - (LO - 1) into EAX to get EAX, 36... returned random in range [0 - 35 inc.]...add LO [15] to the random val in EAX when done.

				; 3. Display the list of integers before sorting, 20 numbers per line with one space between eah value.

				; 4. Sort the list in ascending order (smallest first)

				; 5. Calculate and display the median value of the sorted randArray, rounded to the nearest integer. (USING Round half up rounding described in Canvas) 

				; 6. Display the sorted randArray, 20 numbers per line with one space between each value. Use (not a complete sentance in canvas...)

				; 7. generate an array counts which holds the number of times each value in the range [LO, HI] is ssen in randArray, 
				;		even if the number of times a value is seen is zero.
				;	    For example check canvas...also report 0 count as a 0 in the array

				; 8. Display the array counts, 20 numbers per line with one space between each value.



				; PROGRAM REQUIREMENTS FROM CANVAS

				; 1. The program must be constructed using procedures. Required procedures listed below:
				;		a. main
				;			input parameters: N/A
				;		   output parameters: N/A

				;		b. introduction
				;			input parameters: intro1 (reference), intro2 (reference), ...etc if needed
				;		   output parameters: N/A

				;       c. fillArray
				;			input parameters: N/A
				;		   output parameters: someArray (reference)
				;						Note: LO, HI, ARRAYSIZE will be used as globals within this procedure

				;		d. sortList
				;			input parameters: 
				;		   output parameters:

				;		e. exchangeElements
				;			input parameters:
				;		   output parameters:

				;		f. displayMedian
				;			input parameters:
				;		   output parameters:

				;		g. displayList
				;			input parameters:
				;		   output parameters:

				;		h. countList
				;			input parameters:
				;		   output parameters:
				;
				;
				;
				;
				;
				;
				;

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				; (insert macro definitions here)
				; (insert constant definitions here)

 = 0000001E			ARRAYSIZE = 30
 = 0000000F			LO        = 15
 = 00000032			HI        = 50

 00000000			.data
				; (insert variable definitions here)

				;INTRODUCTION DATA
 00000000 57 65 6C 63 6F	greeting		    BYTE	"Welcome to Project Five: Arrays, Addressing, Stack Passed Params by Zachary Maes!",0
	   6D 65 20 74 6F
	   20 50 72 6F 6A
	   65 63 74 20 46
	   69 76 65 3A 20
	   41 72 72 61 79
	   73 2C 20 41 64
	   64 72 65 73 73
	   69 6E 67 2C 20
	   53 74 61 63 6B
	   20 50 61 73 73
	   65 64 20 50 61
	   72 61 6D 73 20
	   62 79 20 5A 61
	   63 68 61 72 79
	   20 4D 61 65 73
	   21 00
 00000052 54 68 69 73 20	description_1       BYTE	"This program will do something akin to magic... The programmer WILL CHANGE THIS DESCRIPTION LATER ON!!!",0
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 64 6F
	   20 73 6F 6D 65
	   74 68 69 6E 67
	   20 61 6B 69 6E
	   20 74 6F 20 6D
	   61 67 69 63 2E
	   2E 2E 20 54 68
	   65 20 70 72 6F
	   67 72 61 6D 6D
	   65 72 20 57 49
	   4C 4C 20 43 48
	   41 4E 47 45 20
	   54 48 49 53 20
	   44 45 53 43 52
	   49 50 54 49 4F
	   4E 20 4C 41 54
	   45 52 20 4F 4E
	   21 21 21 00

				; DISPLAY DATA
 000000BA 59 6F 75 72 20	unsorted_message    BYTE    "Your unsorted random numbers:",0
	   75 6E 73 6F 72
	   74 65 64 20 72
	   61 6E 64 6F 6D
	   20 6E 75 6D 62
	   65 72 73 3A 00
 000000D8 54 68 65 20 6D	median_message      BYTE    "The median value of the array: ",0
	   65 64 69 61 6E
	   20 76 61 6C 75
	   65 20 6F 66 20
	   74 68 65 20 61
	   72 72 61 79 3A
	   20 00
 000000F8 59 6F 75 72 20	sorted_message      BYTE    "Your sorted random numbers:",0
	   73 6F 72 74 65
	   64 20 72 61 6E
	   64 6F 6D 20 6E
	   75 6D 62 65 72
	   73 3A 00
 00000114 59 6F 75 72 20	list_message        BYTE    "Your list of instances of each generated number, starting with the smallest value:",0
	   6C 69 73 74 20
	   6F 66 20 69 6E
	   73 74 61 6E 63
	   65 73 20 6F 66
	   20 65 61 63 68
	   20 67 65 6E 65
	   72 61 74 65 64
	   20 6E 75 6D 62
	   65 72 2C 20 73
	   74 61 72 74 69
	   6E 67 20 77 69
	   74 68 20 74 68
	   65 20 73 6D 61
	   6C 6C 65 73 74
	   20 76 61 6C 75
	   65 3A 00
 00000167 20 00			one_space           BYTE    " ",0

				; ARRAYS
 00000169  0000001E [		randArray			DWORD   ARRAYSIZE DUP(?)	    ; DUP declaration, empty Array of ARRAYSIZE
	    00000000
	   ]
 000001E1 0000001E		arrayLength			DWORD	LENGTHOF randArray      ; save length of randArray

 000001E5  00000024 [		countsArray         DWORD   (HI - LO + 1) DUP(?)    ; set up counts array to store the final counted elements
	    00000000
	   ]
 00000275 00000024		countsArrLen		DWORD	LENGTHOF countsArray    ; length of the the counts array for use in loop.

				; FAREWELL DATA
 00000279 49 66 20 79 6F	farewell_1          BYTE    "If you have made it this far, congratulations! Thanks for reading my program, goodbye!",0
	   75 20 68 61 76
	   65 20 6D 61 64
	   65 20 69 74 20
	   74 68 69 73 20
	   66 61 72 2C 20
	   63 6F 6E 67 72
	   61 74 75 6C 61
	   74 69 6F 6E 73
	   21 20 54 68 61
	   6E 6B 73 20 66
	   6F 72 20 72 65
	   61 64 69 6E 67
	   20 6D 79 20 70
	   72 6F 67 72 61
	   6D 2C 20 67 6F
	   6F 64 62 79 65
	   21 00

 00000000			.code
 00000000			main PROC
				; (insert executable instructions here)
 00000000  E8 00000000 E		CALL Randomize				   ; Initialize starting seed vaue of RandomRange procedure

 00000005  68 00000000 R		PUSH OFFSET greeting		   ; push strings to stack
 0000000A  68 00000052 R		PUSH OFFSET description_1    
 0000000F  E8 0000008F			CALL introduction			

 00000014  68 00000169 R		PUSH OFFSET randArray          ; push address of randArray to stack
 00000019  E8 000000B2			CALL fillArray

 0000001E  68 00000167 R		PUSH OFFSET one_space		   ; push the space string
 00000023  68 000000BA R		PUSH OFFSET unsorted_message   ; offset +4
 00000028  68 00000169 R		PUSH OFFSET randArray
 0000002D  6A 1E			PUSH ARRAYSIZE
 0000002F  E8 000000C7			CALL displayList			   ; displayList 1st call for unsorted

 00000034  68 00000169 R		PUSH OFFSET randArray		   ; push address of randArray to stack
 00000039  E8 000000F7			CALL sortList

 0000003E  68 00000167 R		PUSH OFFSET one_space		   ; push the space string
 00000043  68 000000F8 R		PUSH OFFSET sorted_message     ; offset +4
 00000048  68 00000169 R		PUSH OFFSET randArray
 0000004D  6A 1E			PUSH ARRAYSIZE
 0000004F  E8 000000A7			CALL displayList			   ; displayList 2nd call for sorted
					
 00000054  68 000000D8 R		PUSH OFFSET median_message
 00000059  68 00000169 R		PUSH OFFSET randArray
 0000005E  E8 000000F8			CALL displayMedian

 00000063  68 00000169 R		PUSH OFFSET randArray
 00000068  68 000001E5 R		PUSH OFFSET countsArray
 0000006D  FF 35 00000275 R		PUSH countsArrLen
 00000073  E8 0000015E			CALL countList

 00000078  68 00000167 R		PUSH OFFSET one_space		   ; push the space string
 0000007D  68 00000114 R		PUSH OFFSET list_message       ; offset +4
 00000082  68 000001E5 R		PUSH OFFSET	countsArray		   
 00000087  FF 35 00000275 R		PUSH countsArrLen
 0000008D  E8 00000069			CALL displayList		       ; displayList 3rd call for list_message

				;  OTHER REQUIRED PROCS
				;	CALL exchangeElements

 00000092  68 00000279 R	    PUSH OFFSET farewell_1	    
 00000097  E8 0000016E			CALL farewell			       ; My additional procedure, stack return address +4

					Invoke ExitProcess,0	       ; exit to operating system
 0000009C  6A 00	   *	    push   +000000000h
 0000009E  E8 00000000 E   *	    call   ExitProcess
 000000A3			main ENDP
				; (insert additional procedures here)

				; ---------------------------------------------------------------------------------
				; Name: introduction
				;
				; Description: 
				; Introduces the Program and Author at the start of the program.
				;
				; Preconditions: The required strings must be declared in the .data section,
				;	and also pushed to the stack prior to the procedure call.
				;
				; Postconditions: None
				;
				; Receives:
				;	[EBP+12] = offset of greeting string
				;	[EBP+8]  = offset of description_1 string 
				;
				; Returns: N/A
				; ---------------------------------------------------------------------------------

 000000A3			introduction PROC
 000000A3  55				PUSH EBP	        ; Base Pointer	
 000000A4  8B EC			MOV  EBP, ESP	
 000000A6  52				PUSH EDX			; Preserve EDX

 000000A7  8B 55 0C			MOV  EDX, [EBP+12] 
 000000AA  E8 00000000 E		CALL WriteString
 000000AF  E8 00000000 E		CALL CrLf
 000000B4  E8 00000000 E		CALL CrLf

 000000B9  8B 55 08			MOV  EDX, [EBP+8]
 000000BC  E8 00000000 E		CALL WriteString
 000000C1  E8 00000000 E		CALL CrLf
 000000C6  E8 00000000 E		CALL CrLf

 000000CB  5A				POP EDX   
 000000CC  5D				POP EBP
 000000CD  C2 0008			RET 8
 000000D0			introduction ENDP

				; ---------------------------------------------------------------------------------
				; Name: fillArray
				;
				; This procedure uses a loop to generate random decimals and insert them into 
				;     an empty array called randArray.
				;
				; Preconditions: randArray must be declared in data as an empty array with 
				;     the ARRAYSIZE constant as its size and DWORD as its type.
				;
				; Postconditions: randArray will be filled with ARRAYSIZE number of decimals.
				;
				; Receives:
				;     [EBP+8] = offset reference to randArray
				;     LO, HI, and ARRAYSIZE used as globals
				;
				; Returns:
				;	  randArray
				; ---------------------------------------------------------------------------------

 000000D0			fillArray PROC
 000000D0  55				PUSH EBP		      ; Base Pointer     
 000000D1  8B EC			MOV  EBP, ESP	      
 000000D3  60				PUSHAD				  ; Preserve used registers
					
 000000D4  B9 0000001E			MOV  ECX, ARRAYSIZE   ; ARRAYSIZE List length into ECX
 000000D9  8B 7D 08			MOV  EDI, [EBP+8]     ; Address of list into EDI

 000000DC				_fillLoop:
					; GENERATE RANDOM DECIMAL
 000000DC  B8 00000032				MOV  EAX, HI	  ; HI into EAX
 000000E1  83 E8 0F				SUB  EAX, LO      ; HI - LO
 000000E4  83 C0 01				ADD  EAX, 1		  ; add 1 to EAX to get upper limit(exclusive) for randomRange	
 000000E7  E8 00000000 E			CALL RandomRange  ; generates 0 - EAX (exclusive), saves random val in EAX
 000000EC  83 C0 0F				ADD  EAX, LO      ; Add LO value to EAX random num to get random within HI-LO range

					; FILL ARRAY
 000000EF  89 07				MOV [EDI], EAX	  ; overwrite value in memory pointed to by EDI
 000000F1  83 C7 04				ADD  EDI, 4		  ; Hardcoded 4 (DWORD) to increment to next index in Array
 000000F4  E2 E6				LOOP _fillLoop

 000000F6  61				POPAD
 000000F7  5D				POP EBP
 000000F8  C2 0010			RET 16
 000000FB			fillArray ENDP

				; ---------------------------------------------------------------------------------
				; Name: displayList
				;
				; Description: 
				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------

 000000FB			displayList PROC
 000000FB  55				PUSH EBP		       ; Base Pointer
 000000FC  8B EC			MOV  EBP, ESP	
 000000FE  60				PUSHAD			       ; preserve all gp registers

 000000FF  8B 55 10			MOV  EDX, [EBP+16]     ; Write the message string
 00000102  E8 00000000 E		CALL WriteString
 00000107  E8 00000000 E		CALL CrLf

 0000010C  8B 7D 0C			MOV  EDI, [EBP+12]	   ; move randArray start ref to EDI
 0000010F  8B 4D 08			MOV  ECX, [EBP+8]	   ; move ARRAYSIZE or countsArrLen to ECX counter
					
 00000112				_PrintArr:
 00000112  8B 07				MOV EAX, [EDI]
 00000114  E8 00000000 E			CALL WriteDec

 00000119  8B 55 14				MOV EDX, [EBP+20]  ; wrtie the one_space string
 0000011C  E8 00000000 E			CALL WriteString

 00000121  83 C7 04				ADD EDI, 4
						
 00000124  E2 EC				LOOP _PrintArr
					
 00000126  E8 00000000 E		CALL CrLf
 0000012B  E8 00000000 E		CALL CrLf

 00000130  61				POPAD		
 00000131  5D				POP EBP
 00000132  C2 0010			RET 16
 00000135			displayList ENDP


				; ---------------------------------------------------------------------------------
				; Name: sortList
				;
				; Description: 

				; DELETE THIS!!!
				; EXAMPLE PYTHON BUBBLE SORT
				;def bubble_sort(a_list):
				    ;"""
				    ;Bubble sort algorithm that sorts a_list in ascending order.
				    ;"""
				    ;for pass_num in range(len(a_list) - 1):
				    ;    for index in range(len(a_list) - 1 - pass_num):
				       ;     if a_list[index] > a_list[index + 1]:
				     ;           temp = a_list[index]
				     ;           a_list[index] = a_list[index + 1]
				     ;           a_list[index + 1] = temp

				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------

 00000135			sortList PROC
 00000135  55				PUSH EBP		             ; Base Pointer
 00000136  8B EC			MOV  EBP, ESP	
 00000138  60				PUSHAD			             ; preserve registers

 00000139  B9 0000001E			MOV ECX, ARRAYSIZE           ; number of elements of randArray into ECX for decrementing the loop iteration counter
					
 0000013E				_arrayLoop:
 0000013E  51					PUSH ECX			     ; save register for loop count
 0000013F  8B 7D 08				MOV EDI, [EBP+8]         ; address of first element of randArray into EDI [or next incremented element after loop]
						
 00000142					_innerLoop:
 00000142  8B 07					MOV EAX, [EDI]       ; move array element at EDI pointer to EAX register
 00000144  39 47 04					CMP [EDI+4], EAX     ; compare next index to previous index at this iteration of the bubble sort
 00000147  7D 05					JGE _noExchange	     ; next is greater than or equal to previous so there is no exchage of values
							
							; CALL exchangeElements {REFACTOR THIS!!!!!!!!!}
 00000149  87 47 04					XCHG EAX, [EDI+4]
 0000014C  89 07					MOV [EDI], EAX

 0000014E					_noExchange:
 0000014E  83 C7 04					ADD EDI, 4			 ; increment EDI pointer
 00000151  E2 EF					LOOP _innerLoop

 00000153  59						POP ECX				 ; pop the _arrayLoop counter out of the stack
 00000154  E2 E8					LOOP _arrayLoop

 00000156  61				POPAD
 00000157  5D				POP	EBP
 00000158  C2 0004			RET 4
 0000015B			sortList ENDP

				; ---------------------------------------------------------------------------------
				; Name: exchangeElements
				;
				; Description: 
				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------

				;exchangeElements PROC
					; Set up Base pointer
					;PUSH EBP		; +4
					;MOV  EBP, ESP	; Base Pointer
					
					; ...





					
					;POP	EBP
					;RET
				;exchangeElements ENDP


				; ---------------------------------------------------------------------------------
				; Name: displayMedian
				;
				; Description: 
				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------

 0000015B			displayMedian PROC
 0000015B  55				PUSH EBP		           ; Base Pointer
 0000015C  8B EC			MOV  EBP, ESP	
 0000015E  60				PUSHAD

 0000015F  8B 55 0C			MOV  EDX, [EBP+12]		   ; display message
 00000162  E8 00000000 E		CALL WriteString

 00000167  B8 0000001E			MOV  EAX, ARRAYSIZE		   ; Set low dividend =====> DIV instruction [EDX:EAX / EBX] ==> (EAX = Quotient) and (EDX = Remainder)
 0000016C  BA 00000000			MOV  EDX, 0				   ; Clear the high dividend
 00000171  BB 00000002			MOV  EBX, 2				   ; Divide EDX:EAX by 2
 00000176  F7 F3			DIV  EBX				   ; (EAX = Quotient) and (EDX = Remainder)

 00000178  83 FA 00			CMP  EDX, 0
 0000017B  74 02			JE   _even
 0000017D  7F 35			JG   _odd

 0000017F				_even:		               ; IF remainder is 0 (even)
						; EAX is the left middle, at this point
 0000017F  8B C8				MOV ECX, EAX           ;set loop count for lower mid index in eax to ecx
 00000181  8B 7D 08				MOV EDI, [EBP+8]

 00000184					_evenLoop1:
 00000184  83 C7 04					ADD  EDI, 4
 00000187  E2 FB					LOOP _evenLoop1
						
 00000189  8B 07				MOV EAX, [EDI]

 0000018B					_evensDiv:
 0000018B  03 47 04					ADD EAX, [EDI+4]
 0000018E  BA 00000000					MOV EDX, 0
 00000193  BB 00000002					MOV EBX, 2
 00000198  F7 F3					DIV EBX		
						
 0000019A  83 FA 00				CMP EDX, 0			    ; if even--> eax is the quotient and median val, if odd--> add 1 before div and follow even rules after div
 0000019D  74 09				JE  _finalEven
 0000019F  75 00				JNE _addOneAndDivAgain

 000001A1					_addOneAndDivAgain:
 000001A1  8B 07					MOV EAX, [EDI]
 000001A3  83 C0 01					ADD EAX, 1
 000001A6  EB E3					JMP _evensDiv

 000001A8					_finalEven:
 000001A8  E8 00000000 E				CALL WriteDec
 000001AD  E8 00000000 E				CALL CrLf
 000001B2  EB 18					JMP _evenDone


 000001B4				_odd:		    ; IF remainder is not 0 (odd)
						; Example: ARRAYSIZE = 21, 21/2 has remainder > 0
						;	-add 1 to arraysize (use arraysize in register first)
						;	-divide arraysize+1 by 2 to get the median index position
						;   -print the median index from the list
 000001B4  8B C8				MOV ECX, EAX     ; set loop counter
 000001B6  8B 7D 08				MOV EDI, [EBP+8]
 000001B9					_oddLoop:
 000001B9  83 C7 04					ADD EDI, 4
 000001BC  E2 FB					LOOP _oddLoop
 000001BE  EB 00				JMP _finalOdd


 000001C0				_finalOdd:
 000001C0  8B 07				MOV EAX, [EDI]
 000001C2  E8 00000000 E			CALL WriteDec
 000001C7  E8 00000000 E			CALL CrLf
					
 000001CC				_evenDone:
					; ---

 000001CC  E8 00000000 E		CALL CrLf
 000001D1  61				POPAD
 000001D2  5D				POP	EBP
 000001D3  C2 0008			RET 8
 000001D6			displayMedian ENDP

				; ---------------------------------------------------------------------------------
				; Name: countList
				;
				; Description: 
				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------

 000001D6			countList PROC
					; Set up Base pointer
 000001D6  55				PUSH EBP		; +4
 000001D7  8B EC			MOV  EBP, ESP	; Base Pointer
 000001D9  60				PUSHAD        ; preserve registers
					; ...



 000001DA  8B 4D 08			MOV ECX, [EBP+8]	; loop counter to countsArrLen
 000001DD  8B 7D 10			MOV EDI, [EBP+16]   ; pointer to start of randArray index0
 000001E0  8B 75 0C			MOV ESI, [EBP+12]	; pointer to start of countsArray index0
 000001E3  BA 0000000F			MOV EDX, LO			; holds Lo and increments up 

 000001E8				_countsArrLoop:
 000001E8  BB 00000000				MOV EBX, 0      ; value amount counter reset to 0
						
 000001ED					_skipValReset:
 000001ED  39 17					CMP [EDI], EDX
 000001EF  75 0A					JNE _inputValue
 000001F1  74 00					JE  _sameValueHappened

 000001F3					_sameValueHappened:
 000001F3  83 C3 01					ADD	EBX, 1	   ; add 1 to value counter
 000001F6  83 C7 04					ADD EDI, 4     ; inc edi pointer
 000001F9  EB F2					JMP _skipValReset

 000001FB					_inputValue:
 000001FB  89 1E					MOV [ESI], EBX	
 000001FD  83 C6 04					ADD ESI, 4
 00000200  83 C2 01					ADD EDX, 1
 00000203  E2 E3					LOOP _countsArrLoop   ; dec ecx

 00000205  61				POPAD
 00000206  5D				POP	EBP
 00000207  C2 000C			RET 12
 0000020A			countList ENDP





				; ---------------------------------------------------------------------------------
				; Name: farewell
				;
				; Description: 
				;
				; Preconditions: 
				;
				; Postconditions:
				;
				; Receives:
				;
				; Returns:
				; ---------------------------------------------------------------------------------

 0000020A			farewell PROC
					; Set up Base pointer
 0000020A  55				PUSH EBP		; +4
 0000020B  8B EC			MOV  EBP, ESP	; Base Pointer
 0000020D  52				PUSH EDX        ; preserve edx
					; ...

 0000020E  8B 55 08			MOV  EDX, [EBP+8] 
 00000211  E8 00000000 E		CALL WriteString
 00000216  E8 00000000 E		CALL CrLf
 0000021B  E8 00000000 E		CALL CrLf

 00000220  5A				POP	EDX
 00000221  5D				POP	EBP
 00000222  C2 0004			RET 4
 00000225			farewell ENDP

				END main


				; OLDE counList

				; countList PROC
					; Set up Base pointer
				;	PUSH EBP		; +4
				;	MOV  EBP, ESP	; Base Pointer
				;	PUSHAD        ; preserve registers
				;	; ...
				;
				;
				;
				;	MOV ECX, ARRAYSIZE	; loop counter to arraysize
				;	MOV ESI, [EBP+8]	; pointer to start of countsArray index0
				;	MOV EDI, [EBP+12]   ; pointer to start of randArray index0
				;	
				;	;MOV EAX, [EDI]		; copy first array value at EDI pointer to EAX
				;	MOV EBX, 0			; count for index of randArray
				;	MOV EDX, LO			; holds Lo and increments up 
				;
				;	; not handling if a value at lo (or later on)... need to account for if values have zero instances
				;	_checkVals:
				;		; dont forget to stop the loop with HI when EDX reaches it...
				;		CMP EDX, HI
				;		JG  _endCountItter...
				;
				;		CMP [EDI], EDX		; compare randArray item to LO (+)
				;		JNE _countZero
				;		JE  _sameValueHappened
				;
				;	_countZero:
				;		MOV [ESI], 0	
				;		ADD ESI, 4
				;		ADD EDX, 1
				;		JMP _checkVals
				;
				;	_sameValueHappened:
				;		ADD	EBX, 1	   ; add 1 to value counter
				;		MOV EAX, [EDI] ; eax now holds the current (soon to be old) value for comparison
				;		ADD EDI, 4     ; inc EDI pointer
				;		CMP [EDI], EAX ; compare next to prev
				;		JG  _endCountItter
				;		JE  _checkVals
				;
				;	_endCountItter:
				;		MOV [ESI], EBX  ; move ebx count into current esi array position
				;
				;
				;
				;

				 ; not incorporated into above yet... fix this

				;	_countsLoop:
				;		CMP [EDI], EAX
				;		JE	 _sameVal
				;		JNE  _diffVal
				;		
				;
				;		_sameVal:
				;			ADD EBX, 1
				;			JMP _countsEnd
				;
				;		_diffVal:
				;			MOV 
				;
				;		_countsEnd:
				;			ADD EDI, 4
				;			LOOP _countsLoop
				;
				;	POPAD
				;	POP	EBP
				;	RET 8
				;countList ENDP
Microsoft (R) Macro Assembler Version 14.29.30139.0	    08/09/22 01:36:46
<Project Five: Arrays, Addressing, Stack Passed Params     (  Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002D0 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000225 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
countList  . . . . . . . . . . .	P Near	 000001D6 _TEXT	Length= 00000034 Public STDCALL
  _countsArrLoop . . . . . . . .	L Near	 000001E8 _TEXT	
  _skipValReset  . . . . . . . .	L Near	 000001ED _TEXT	
  _sameValueHappened . . . . . .	L Near	 000001F3 _TEXT	
  _inputValue  . . . . . . . . .	L Near	 000001FB _TEXT	
displayList  . . . . . . . . . .	P Near	 000000FB _TEXT	Length= 0000003A Public STDCALL
  _PrintArr  . . . . . . . . . .	L Near	 00000112 _TEXT	
displayMedian  . . . . . . . . .	P Near	 0000015B _TEXT	Length= 0000007B Public STDCALL
  _even  . . . . . . . . . . . .	L Near	 0000017F _TEXT	
  _evenLoop1 . . . . . . . . . .	L Near	 00000184 _TEXT	
  _evensDiv  . . . . . . . . . .	L Near	 0000018B _TEXT	
  _addOneAndDivAgain . . . . . .	L Near	 000001A1 _TEXT	
  _finalEven . . . . . . . . . .	L Near	 000001A8 _TEXT	
  _odd . . . . . . . . . . . . .	L Near	 000001B4 _TEXT	
  _oddLoop . . . . . . . . . . .	L Near	 000001B9 _TEXT	
  _finalOdd  . . . . . . . . . .	L Near	 000001C0 _TEXT	
  _evenDone  . . . . . . . . . .	L Near	 000001CC _TEXT	
farewell . . . . . . . . . . . .	P Near	 0000020A _TEXT	Length= 0000001B Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000D0 _TEXT	Length= 0000002B Public STDCALL
  _fillLoop  . . . . . . . . . .	L Near	 000000DC _TEXT	
introduction . . . . . . . . . .	P Near	 000000A3 _TEXT	Length= 0000002D Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A3 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000135 _TEXT	Length= 00000026 Public STDCALL
  _arrayLoop . . . . . . . . . .	L Near	 0000013E _TEXT	
  _innerLoop . . . . . . . . . .	L Near	 00000142 _TEXT	
  _noExchange  . . . . . . . . .	L Near	 0000014E _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000001Eh   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI . . . . . . . . . . . . . . .	Number	 00000032h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO . . . . . . . . . . . . . . .	Number	 0000000Fh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayLength  . . . . . . . . . .	DWord	 000001E1 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
countsArrLen . . . . . . . . . .	DWord	 00000275 _DATA	
countsArray  . . . . . . . . . .	DWord	 000001E5 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
description_1  . . . . . . . . .	Byte	 00000052 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
farewell_1 . . . . . . . . . . .	Byte	 00000279 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
list_message . . . . . . . . . .	Byte	 00000114 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
median_message . . . . . . . . .	Byte	 000000D8 _DATA	
one_space  . . . . . . . . . . .	Byte	 00000167 _DATA	
randArray  . . . . . . . . . . .	DWord	 00000169 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
sorted_message . . . . . . . . .	Byte	 000000F8 _DATA	
unsorted_message . . . . . . . .	Byte	 000000BA _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
